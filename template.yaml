apiVersion: v1
kind: Template
labels:
  template: cockroachdb
metadata:
  annotations:
    description: Template for deploying CockroachDB
    iconClass: icon-cockroachdb
    tags: cockroach,cockroachdb,database
  name: cockroachdb
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: cockroachdb
    namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: ClusterRole
  metadata:
    name: cockroachdb
  rules:
  - resources:
    - secrets
    verbs:
    - get
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests.certificates.k8s.io
    verbs:
    - get
    - create
- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: cockroachdb
  roleRef:
    name: cockroachdb
  subjects:
  - kind: ServiceAccount
    name: cockroachdb
    namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: Service
  metadata:
    # This service is meant to be used by clients of the database. It exposes a ClusterIP that will
    # automatically load balance connections to the different database pods.
    name: ${APP_NAME}-public
    namespace: "${NAMESPACE}"
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    # The main port, served by gRPC, serves Postgres-flavor SQL, internode
    # traffic and the cli.
    - port: 26257
      targetPort: 26257
      name: grpc
    # The secondary port serves the UI as well as health and debug endpoints.
    - port: 8080
      targetPort: 8080
      name: http
    selector:
      app: ${APP_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    # This service only exists to create DNS entries for each pod in the stateful
    # set such that they can resolve each other's IP addresses. It does not
    # create a load-balanced ClusterIP and should not be used directly by clients
    # in most circumstances.
    name: ${APP_NAME}
    namespace: "${NAMESPACE}"
    labels:
      app: ${APP_NAME}
    annotations:
      # This is needed to make the peer-finder work properly and to help avoid
      # edge cases where instance 0 comes up after losing its data and needs to
      # decide whether it should create a new cluster or try to join an existing
      # one. If it creates a new cluster when it should have joined an existing
      # one, we'd end up with two separate clusters listening at the same service
      # endpoint, which would be very bad.
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      # Enable automatic monitoring of all instances when Prometheus is running in the cluster.
      prometheus.io/scrape: "true"
      prometheus.io/path: "_status/vars"
      prometheus.io/port: "8080"
  spec:
    ports:
    - port: 26257
      targetPort: 26257
      name: grpc
    - port: 8080
      targetPort: 8080
      name: http
    clusterIP: None
    selector:
      app: ${APP_NAME}
- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    name: ${APP_NAME}-budget
    namespace: "${NAMESPACE}"
    labels:
      app: ${APP_NAME}
  spec:
    selector:
      matchLabels:
        app: ${APP_NAME}
    minAvailable: 67%
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: ${APP_NAME}
    namespace: "${NAMESPACE}"
  spec:
    serviceName: ${APP_NAME}
    replicas: 3
    template:
      metadata:
        labels:
          app: ${APP_NAME}
      spec:
        serviceAccountName: cockroachdb
        # Init containers are run only once in the lifetime of a pod, before
        # it's started up for the first time. It has to exit successfully
        # before the pod's main containers are allowed to start.
        # This particular init container does a DNS lookup for other pods in
        # the set to help determine whether or not a cluster already exists.
        # If any other pods exist, it creates a file in the cockroach-data
        # directory to pass that information along to the primary container that
        # has to decide what command-line flags to use when starting CockroachDB.
        # This only matters when a pod's persistent volume is empty - if it has
        # data from a previous execution, that data will always be used.
        #
        # If your Kubernetes cluster uses a custom DNS domain, you will have
        # to add an additional arg to this pod: "-domain=<your-custom-domain>"
        initContainers:
        - name: bootstrap
          image: ${INIT_IMAGE}
          imagePullPolicy: IfNotPresent
          args:
          - "-on-start=/on-start.sh"
          - "-service=${APP_NAME}"
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          volumeMounts:
          - name: datadir
            mountPath: /cockroach/cockroach-data
        # The init-certs container sends a certificate signing request to the
        # kubernetes cluster.
        # You can see pending requests using: kubectl get csr
        # CSRs can be approved using:         kubectl certificate approve <csr name>
        #
        # All addresses used to contact a node must be specified in the --addresses arg.
        #
        # In addition to the node certificate and key, the init-certs entrypoint will symlink
        # the cluster CA to the certs directory.
        - name: init-certs
          image: ${INIT_CERTS_IMAGE}
          imagePullPolicy: IfNotPresent
          command:
          - "/bin/ash"
          - "-ecx"
          - "/request-cert -namespace=${POD_NAMESPACE} -certs-dir=/cockroach-certs -type=node -addresses=localhost,127.0.0.1,${POD_IP},$(hostname -f),${APP_NAME}-public -symlink-ca-from=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          volumeMounts:
          - name: certs
            mountPath: /cockroach-certs
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - ${APP_NAME}
                topologyKey: kubernetes.io/hostname
        containers:
        - name: cockroachdb
          image: ${DB_IMAGE}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 10m
              memory: 124Mi
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
          ports:
          - containerPort: 26257
            name: grpc
          - containerPort: 8080
            name: http
          volumeMounts:
          - name: datadir
            mountPath: /cockroach/cockroach-data
          - name: certs
            mountPath: /cockroach/cockroach-certs
          command:
            - "/bin/bash"
            - "-ecx"
            - |
              # The use of qualified `hostname -f` is crucial:
              # Other nodes aren't able to look up the unqualified hostname.
              CRARGS=("start" "--logtostderr" "--certs-dir" "/cockroach/cockroach-certs" "--host" "$(hostname -f)" "--http-host" "0.0.0.0" "--cache" "25%" "--max-sql-memory" "25%")
              # We only want to initialize a new cluster (by omitting the join flag)
              # if we're sure that we're the first node (i.e. index 0) and that
              # there aren't any other nodes running as part of the cluster that
              # this is supposed to be a part of (which indicates that a cluster
              # already exists and we should make sure not to create a new one).
              # It's fine to run without --join on a restart if there aren't any
              # other nodes.
              if [ ! "$(hostname)" == "${APP_NAME}-0" ] || \
                [ -e "/cockroach/cockroach-data/cluster_exists_marker" ]
              then
                # We don't join cockroachdb in order to avoid a node attempting
                # to join itself, which currently doesn't work
                # (https://github.com/cockroachdb/cockroach/issues/9625).
                CRARGS+=("--join" "${APP_NAME}-public")
              fi
              exec /cockroach/cockroach ${CRARGS[*]}
        # No pre-stop hook is required, a SIGTERM plus some time is all that's
        # needed for graceful shutdown of a node.
        terminationGracePeriodSeconds: 60
        volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: datadir
        - name: certs
          emptyDir: {}
    volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
          volume.alpha.kubernetes.io/storage-class: anything
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: ${VOLUME_SIZE}
parameters:
- description: The name of this application
  displayName: Application Name
  name: APP_NAME
  required: true
  value: cockroachdb
- description: The namespace in which CockroachDB will be deployed
  displayName: Openshift Namespace
  name: NAMESPACE
  required: true
- description: The CockroachDB image to use
  displayName: DB Image
  name: DB_IMAGE
  required: true
  value: cockroachdb/cockroach:v1.1.2
- description: The CockroachDB init image to use
  displayName: Init Image
  name: INIT_IMAGE
  required: true
  value: cockroachdb/cockroach-k8s-init:0.2
- description: The CockroachDB init certificates image to use
  displayName: Init Certs Image
  name: INIT_CERTS_IMAGE
  required: true
  value: cockroachdb/cockroach-k8s-request-cert:0.2
- description: The CockroachDB database volume size
  displayName: Volume size
  name: VOLUME_SIZE
  required: true
  value: 1Gi
- description: The CockroachDB memory limit
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 256Mi
- description: The CockroachDB CPU limit
  displayName: CPU Limit
  name: CPU_LIMIT
  required: true
  value: 100m
